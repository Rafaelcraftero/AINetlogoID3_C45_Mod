;;----------------------------------- ID3-Tables -----------------------------------------
; Library to create Decision Trees by using ID3 algorithm
;
; Madified by Rafael Balbuena LÃ³pez DNI: 23883362R 10/02/2021
;
;;----------------------------------------------------------------------------------------

;; It works on datasets given as Dataframes (rows of data with some fixed structure 
;; given by a header).
extensions [table]

globals [
  subDict
  tableStore
  fnode
]

;; Dataframes are data matrix where the first row is the head. For our ID3, last column is 
;; the attribute to classify.

; Entropy of a list (according to the frequency of their elements)
to-report entropy [l]
  ; Compute the relative frequency of the elements
  let l2 map [ x -> frec x l ] (remove-duplicates l)
  ; Apply entropy to the list of frequencies
  report sum map [ x -> ifelse-value (x = 0)[0][(-1) * x * log x 2] ] l2
end

; Report for relative frequency of an element in a list
to-report frec [el L]
  report (length (filter [ x -> x = el ] L)) / (length L)
end

; Report Relative Entropy of an attribute in a dataframe
to-report entropy-rel [atr att-target df]
  ; Extract values of the attribute
  let vals  (DF:col atr df)
  ; Acumulator for the relative entropy
  let ent-rel 0
  ; Para cada posible valor del atributo:
  foreach remove-duplicates vals
  [ x ->
    ; Compute the relative frec of x
    let f frec x vals
    ; Take only rows with x in this column, and build a new dataframe with those rows
    let df2 DF:filter-col atr x df
    ; Compute the entropy of the last column in this new dataframe
    let ex entropy  (DF:col att-target df2)
    ; Accumulate it
    set ent-rel ent-rel + f * ex
  ]
  report ent-rel
end

;; Gain Information in a dataframe for an attribute
to-report GI [atr att-target df]
  report (entropy  (DF:col att-target df)) - (entropy-rel atr att-target df)
end

; Report the attribute with max Gain Information in a dataframe
to-report Max-GI [att-target df]
  let other-atrs (remove att-target DF:header df)
  let atr1 map [ x -> (list x (GI x att-target df) ) ] other-atrs
  report first first sort-by [ [x y] -> (last x) > (last y) ] atr1
end

; Report the attribute with max Gain Information Ratio in a dataframe
to-report Max-GR [df att-target]
  let other-atrs (remove att-target DF:header df)
  let atr1 map [ x -> (list x (ifelse-value ((entropy DF:col x df) = 0) [0] [(GI df x att-target) / (entropy DF:col x df)])) ] other-atrs
  report first first sort-by [ [x y] -> (last x) > (last y) ] atr1
end
; Initialize tableStore
to ID3:tableList
  set tableStore table:make
end

;; Main procedure to create the Decision Tree with ID3
;;       df : Dataframe
;; Reports the main root node 
;; (later, we can ask this node to evaluate new data)

to-report ID3:ID3 [att-target df Var-name]
  let dict table:make
  set fnode table:make
  set subDict table:make
  ID3:ID3_aux att-target df
  table:put fnode Max-GI att-target df subDict
  table:put dict att-target fnode
  table:put tableStore Var-name dict
  report dict
end

; ID3 Algorithm recursive.
;  Diferenciate between 
;                   Answer-node (it is classified)
;               and Decision-node (to be classified)
;  Returns the node and, if it is Decision, then it generates the branches
;  and resursively call itself with the new dataframes.
to ID3:ID3_aux [att-target df]
  let mx Max-GI att-target df
  let u DF:col-values mx df
  let q 0
  ifelse length (DF:header df) = 1 
  [
    table:put subDict mx "Failure"
  ]
  [ 
    if not ID3:classified? att-target df[
      let h table:make
        foreach (DF:col-values mx df)
        [ 
        x ->  
        while [q < length u] [
          ifelse ID3:classified? att-target (DF:rem-col mx (DF:filter-col mx item q u df))[
            table:put h item q u one-of (DF:col att-target (DF:rem-col mx (DF:filter-col mx item q u df)))
             
          ][
            table:put h item q u Max-GI att-target (DF:rem-col mx (DF:filter-col mx item q u df))
          ]
       
          set q q + 1

        ]
    
        if(not table:has-key? subDict mx)[
          table:put subDict mx h  
        ]

        ID3:ID3_aux att-target (DF:rem-col mx (DF:filter-col mx x df))
        ]      
    ]
  ]
 
end

; The C4.5 Algorithm can be obtained from standard ID3 by previously transforming the numerical
; attributes to categorical decisions.
to-report ID3:C4.5 [att-target Num-atts df Var-name]
  output-print "Preparing Dataframe..."
  set df (ID3:num2att Num-atts df)

  output-print DF:pp df
  output-print "Computing ID3..."
  report ID3:ID3 att-target df Var-name
end


; Reports if a dataframe is classified or not
to-report ID3:classified? [att-target df]
;  let clas (last first df)
  let #vals length (DF:col-values att-target df)
;  let vals length remove-duplicates val
  report (#vals = 1)
end

; Transform the attributes from Num-atts (numerical) into a set of 
; categorical attributes (of the form "att <= val")
to-report ID3:num2att [Num-atts df]
  foreach Num-atts [
    att ->
    let vals sort DF:col-values att df
    foreach vals [
      v -> 
      set df DF:add-calc-col (word att "<=" v) [r -> (DF:value att r df <= v)] df
    ]
    set df DF:rem-col att df
  ]
  report df
end


; Reports to evaluate a Decision Tree on new data
; It must be called from an ID3:node 

to-report ID3:evaluate [datum tree-Name]

  let table table:get tableStore tree-Name
  let table2 table:get table item 0 table:keys table
  set fnode table:get table2 item 0 table:keys table2
  let att-target item 0 table:keys table2
  let k ID3:evaluate-aux datum att-target
  while [member? k table:keys fnode ][
    set k ID3:evaluate-aux datum k
  
  ]
  report k
end

to-report ID3:evaluate-aux [datum att-target]
  let ls table:make
  let lk ""
  let lh ""
  let str ""
  foreach table:to-list fnode
  [ x ->
    if(member? att-target x)[
      set ls item 1 x
    ]

  ]
  let att-target-Val ID3:value-of att-target datum
  foreach datum 
  [ y -> 
    if(member? att-target-Val y)[
      set lk item 1 y   
    ]
        
  ]
  
  foreach table:to-list ls
  [ z ->
    if(member? lk z)[
      set lh item 1 z
    ]
    
    if (is-number? lk)[
      let k item 1 sep-aux att-target
      set str (word att-target-Val " <= " k)
      if (runresult str)[
        set lh item 1 z
      ]
    ]
  ]
  report lh
end

; Take the value of attribute att in datum dat.
; The structure of d must be: [[att1 v1] [att2 v2] ...]
to-report ID3:value-of [att dat]
  if (member? "<=" att) [
    set att item 0 sep-aux att
  ]
  let fil filter [x -> first x = att] dat

  ifelse not empty? fil
  [
    report last first fil
  ]
  [ 
    report "ID3:Failure"
  ]
end

;split a string in two strings by "<=" and return it in a list
to-report sep-aux [rep]
  let s "<="
  let pos 0
  let lg length rep 
  set pos position s rep  
  let ls (list (substring rep 0 pos) (substring rep (pos + length s) lg))
  report ls
end

